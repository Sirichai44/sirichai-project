definitions:
  dtos.Context:
    properties:
      message:
        type: string
      results: {}
      status:
        type: integer
    type: object
  dtos.DtoHide:
    properties:
      hide:
        example: true
        type: boolean
    required:
    - hide
    type: object
  dtos.DtoList:
    properties:
      category:
        example: 5f9b3b3b7f7b7b7b7b7b7b7b
        type: string
      content:
        example: This is a content
        maxLength: 5000
        type: string
      hide:
        example: false
        type: boolean
      is_public:
        example: true
        type: boolean
      pictures:
        items:
          items:
            type: integer
          type: array
        type: array
      title:
        example: This is a title
        type: string
    required:
    - category
    - content
    - is_public
    - title
    type: object
  dtos.DtoLogin:
    properties:
      email:
        example: admin@mail.com
        type: string
      password:
        example: P@ssw0rd
        type: string
    required:
    - email
    - password
    type: object
  dtos.DtoMessage:
    properties:
      content:
        example: This is a message
        type: string
      receiver_id:
        example: 5f9b3b3b8f8b8b8b8b8b8b8b
        type: string
      sender_id:
        example: 5f9b3b3b7f7b7b7b7b7b7b7b
        type: string
      type:
        example: list
        type: string
    required:
    - receiver_id
    - sender_id
    - type
    type: object
  dtos.DtoRegister:
    properties:
      confirm_password:
        example: P@ssw0rd
        type: string
      email:
        example: test@mail.com
        type: string
      password:
        example: P@ssw0rd
        type: string
      username:
        example: username
        type: string
    required:
    - confirm_password
    - email
    - password
    - username
    type: object
  dtos.DtoRole:
    properties:
      id:
        example: 5f9b3b3b7f7b7b7b7b7b7b7b
        type: string
      role:
        enum:
        - user
        - moderator
        example: moderator
        type: string
    required:
    - id
    - role
    type: object
  dtos.Listing:
    properties:
      categoryID:
        type: string
      content:
        type: string
      createdAt:
        type: string
      hide:
        type: boolean
      id:
        type: string
      isPublic:
        type: boolean
      pictures:
        items:
          items:
            type: integer
          type: array
        type: array
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  dtos.Register:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  dtos.RegisterResponse:
    properties:
      token:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user to the application
      parameters:
      - description: Login
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  $ref: '#/definitions/dtos.RegisterResponse'
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
      summary: Login a user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user for the application
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  $ref: '#/definitions/dtos.RegisterResponse'
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
      summary: Register a new user
      tags:
      - auth
  /api/v1/auth/role:
    post:
      consumes:
      - application/json
      description: Change a user role to moderator or user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Change a user role
      tags:
      - auth
  /api/v1/list:
    get:
      consumes:
      - application/json
      description: Get all public listings when user is not authenticated or all listings
        when user is authenticated
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  items:
                    $ref: '#/definitions/dtos.Listing'
                  type: array
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all public listings
      tags:
      - list
  /api/v1/list/create:
    post:
      consumes:
      - application/json
      description: Create a new listing for the application
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new listing
      tags:
      - list
  /api/v1/list/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a listing for the application
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Listing ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a listing
      tags:
      - list
  /api/v1/list/hide/{id}:
    post:
      consumes:
      - application/json
      description: Hide a listing for the application
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Listing ID
        in: path
        name: id
        required: true
        type: string
      - description: Hide
        in: body
        name: hide
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoHide'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Hide a listing
      tags:
      - list
  /api/v1/list/update/{id}:
    put:
      consumes:
      - application/json
      description: Update a listing for the application
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Listing ID
        in: path
        name: id
        required: true
        type: string
      - description: Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update a listing
      tags:
      - list
  /api/v1/message:
    post:
      consumes:
      - application/json
      description: Feedback for listing
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback
        in: body
        name: feedback
        required: true
        schema:
          $ref: '#/definitions/dtos.DtoMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  type: object
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Feedback for listing
      tags:
      - message
  /api/v1/message/list:
    get:
      consumes:
      - application/json
      description: Get all list before 1 year for sending feedback
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  items:
                    $ref: '#/definitions/dtos.Listing'
                  type: array
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all list before 1 year
      tags:
      - message
  /api/v1/message/user:
    get:
      consumes:
      - application/json
      description: Get all user for sending feedback
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Context'
            - properties:
                message:
                  type: string
                results:
                  items:
                    $ref: '#/definitions/dtos.Register'
                  type: array
                status:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema: {}
        "406":
          description: Not Acceptable
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all user
      tags:
      - message
swagger: "2.0"
