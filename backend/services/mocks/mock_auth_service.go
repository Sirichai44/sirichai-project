// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth.go
//
// Generated by this command:
//
//	mockgen -source=services/auth.go -destination=services/mocks/mock_auth_service.go -package=mocks AuthService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dtos "sirichai-bank/dtos"
	reflect "reflect"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockAuthService) DeleteOne(ctx context.Context, filter primitive.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockAuthServiceMockRecorder) DeleteOne(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockAuthService)(nil).DeleteOne), ctx, filter)
}

// FindAll mocks base method.
func (m *MockAuthService) FindAll(ctx context.Context, filter ...primitive.E) ([]dtos.Register, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].([]dtos.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAuthServiceMockRecorder) FindAll(ctx any, filter ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAuthService)(nil).FindAll), varargs...)
}

// FindByKeyValue mocks base method.
func (m *MockAuthService) FindByKeyValue(ctx context.Context, key string, value any, opts ...primitive.E) ([]dtos.Register, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByKeyValue", varargs...)
	ret0, _ := ret[0].([]dtos.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKeyValue indicates an expected call of FindByKeyValue.
func (mr *MockAuthServiceMockRecorder) FindByKeyValue(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKeyValue", reflect.TypeOf((*MockAuthService)(nil).FindByKeyValue), varargs...)
}

// FindOneAndUpdate mocks base method.
func (m *MockAuthService) FindOneAndUpdate(ctx context.Context, filter, update primitive.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndUpdate", ctx, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate.
func (mr *MockAuthServiceMockRecorder) FindOneAndUpdate(ctx, filter, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockAuthService)(nil).FindOneAndUpdate), ctx, filter, update)
}

// FindOneKeyValue mocks base method.
func (m *MockAuthService) FindOneKeyValue(ctx context.Context, key string, value any, opts ...primitive.E) (*dtos.Register, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneKeyValue", varargs...)
	ret0, _ := ret[0].(*dtos.Register)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneKeyValue indicates an expected call of FindOneKeyValue.
func (mr *MockAuthServiceMockRecorder) FindOneKeyValue(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneKeyValue", reflect.TypeOf((*MockAuthService)(nil).FindOneKeyValue), varargs...)
}

// InsertOne mocks base method.
func (m *MockAuthService) InsertOne(ctx context.Context, t dtos.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockAuthServiceMockRecorder) InsertOne(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockAuthService)(nil).InsertOne), ctx, t)
}
