// Code generated by MockGen. DO NOT EDIT.
// Source: services/service.go
//
// Generated by this command:
//
//	mockgen -source=services/service.go -destination=services/mocks/mock_service.go -package=mocks Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder[T]
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder[T any] struct {
	mock *MockService[T]
}

// NewMockService creates a new mock instance.
func NewMockService[T any](ctrl *gomock.Controller) *MockService[T] {
	mock := &MockService[T]{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService[T]) EXPECT() *MockServiceMockRecorder[T] {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockService[T]) DeleteOne(ctx context.Context, filter primitive.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockServiceMockRecorder[T]) DeleteOne(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockService[T])(nil).DeleteOne), ctx, filter)
}

// FindAll mocks base method.
func (m *MockService[T]) FindAll(ctx context.Context, filter ...primitive.E) ([]T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServiceMockRecorder[T]) FindAll(ctx any, filter ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockService[T])(nil).FindAll), varargs...)
}

// FindByKeyValue mocks base method.
func (m *MockService[T]) FindByKeyValue(ctx context.Context, key string, value any, opts ...primitive.E) ([]T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByKeyValue", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKeyValue indicates an expected call of FindByKeyValue.
func (mr *MockServiceMockRecorder[T]) FindByKeyValue(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKeyValue", reflect.TypeOf((*MockService[T])(nil).FindByKeyValue), varargs...)
}

// FindOneAndUpdate mocks base method.
func (m *MockService[T]) FindOneAndUpdate(ctx context.Context, filter, update primitive.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndUpdate", ctx, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate.
func (mr *MockServiceMockRecorder[T]) FindOneAndUpdate(ctx, filter, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockService[T])(nil).FindOneAndUpdate), ctx, filter, update)
}

// FindOneKeyValue mocks base method.
func (m *MockService[T]) FindOneKeyValue(ctx context.Context, key string, value any, opts ...primitive.E) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneKeyValue", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneKeyValue indicates an expected call of FindOneKeyValue.
func (mr *MockServiceMockRecorder[T]) FindOneKeyValue(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneKeyValue", reflect.TypeOf((*MockService[T])(nil).FindOneKeyValue), varargs...)
}

// InsertOne mocks base method.
func (m *MockService[T]) InsertOne(ctx context.Context, t T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockServiceMockRecorder[T]) InsertOne(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockService[T])(nil).InsertOne), ctx, t)
}
